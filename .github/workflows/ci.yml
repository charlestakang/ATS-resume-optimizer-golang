name: CI Pipeline

on:
  push:
    branches: [ main, dev, develop, feature/*, hotfix/* ]
  pull_request:
    branches: [ main, dev, develop ]
    types: [ opened, synchronize, reopened, ready_for_review ]
  workflow_dispatch:
    inputs:
      debug:
        description: 'Enable debug mode'
        required: false
        default: 'false'

env:
  GO_VERSION: '1.21'
  NODE_VERSION: '20'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  # ============================================
  # Lint Jobs
  # ============================================
  lint-go:
    name: Lint Go Code
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false || github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: |
            apps/api/go.sum
            apps/worker/go.sum

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2

      - name: Run golangci-lint for API
        working-directory: apps/api
        run: |
          golangci-lint run --timeout=10m --config=../../.golangci.yml || true

      - name: Run golangci-lint for Worker
        working-directory: apps/worker
        run: |
          golangci-lint run --timeout=10m --config=../../.golangci.yml || true

      - name: Check Go formatting
        run: |
          if [ "$(gofmt -s -l apps/api apps/worker | wc -l)" -gt 0 ]; then
            echo "Go files are not formatted. Please run 'gofmt -s -w .' on your code."
            gofmt -s -l apps/api apps/worker
            exit 1
          fi

  lint-js:
    name: Lint JavaScript/TypeScript
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false || github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: apps/web/package-lock.json

      - name: Install dependencies
        working-directory: apps/web
        run: |
          npm ci --prefer-offline --no-audit

      - name: Run ESLint
        working-directory: apps/web
        run: |
          npm run lint || true

      - name: Check TypeScript types
        working-directory: apps/web
        run: |
          npm run type-check || npx tsc --noEmit || true

      - name: Check Prettier formatting
        working-directory: apps/web
        run: |
          npm run format:check || npx prettier --check "src/**/*.{ts,tsx,js,jsx,json,css,md}" || true

  # ============================================
  # Test Jobs
  # ============================================
  test-go-api:
    name: Test Go API
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false || github.event_name != 'pull_request'
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: apps/api/go.sum

      - name: Install dependencies
        working-directory: apps/api
        run: |
          go mod download
          go mod verify

      - name: Run unit tests with coverage
        working-directory: apps/api
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: testuser
          DB_PASSWORD: testpass
          DB_NAME: testdb
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test-secret-key-for-ci
          MINIO_ENDPOINT: localhost:9000
          MINIO_ACCESS_KEY: minioadmin
          MINIO_SECRET_KEY: minioadmin
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./... || true
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./apps/api/coverage.out
          flags: api
          name: api-coverage
          fail_ci_if_error: false

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: api-coverage
          path: |
            apps/api/coverage.out
            apps/api/coverage.html

  test-go-worker:
    name: Test Go Worker
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false || github.event_name != 'pull_request'
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: apps/worker/go.sum

      - name: Install dependencies
        working-directory: apps/worker
        run: |
          go mod download
          go mod verify

      - name: Run unit tests with coverage
        working-directory: apps/worker
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: testuser
          DB_PASSWORD: testpass
          DB_NAME: testdb
          REDIS_HOST: localhost
          REDIS_PORT: 6379
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./... || true
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./apps/worker/coverage.out
          flags: worker
          name: worker-coverage
          fail_ci_if_error: false

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: worker-coverage
          path: |
            apps/worker/coverage.out
            apps/worker/coverage.html

  test-nextjs:
    name: Test Next.js Application
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false || github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: apps/web/package-lock.json

      - name: Install dependencies
        working-directory: apps/web
        run: |
          npm ci --prefer-offline --no-audit

      - name: Run unit tests with coverage
        working-directory: apps/web
        env:
          CI: true
          NODE_ENV: test
        run: |
          npm run test:ci || npm test || echo "No tests configured yet"

      - name: Run component tests
        working-directory: apps/web
        run: |
          npm run test:components || echo "No component tests configured yet"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: always()
        with:
          files: ./apps/web/coverage/lcov.info
          flags: web
          name: web-coverage
          fail_ci_if_error: false

      - name: Build Next.js application
        working-directory: apps/web
        env:
          NEXT_PUBLIC_API_URL: http://localhost:8080
          NEXT_PUBLIC_APP_URL: http://localhost:3000
        run: |
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nextjs-build
          path: |
            apps/web/.next
            apps/web/out

  # ============================================
  # Integration Tests
  # ============================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false || github.event_name != 'pull_request'
    needs: [test-go-api, test-go-worker, test-nextjs]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start services with Docker Compose
        run: |
          cp .env.example .env
          docker-compose up -d
          sleep 30

      - name: Check service health
        run: |
          docker-compose ps
          curl -f http://localhost:8080/health || exit 1
          curl -f http://localhost:3000/api/health || exit 1

      - name: Run API integration tests
        run: |
          docker-compose exec -T api go test -v ./tests/integration/... || echo "No integration tests yet"

      - name: Run E2E tests
        run: |
          docker-compose exec -T web npm run test:e2e || echo "No E2E tests configured yet"

      - name: Collect Docker logs
        if: always()
        run: |
          docker-compose logs > docker-compose.log

      - name: Upload Docker logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docker-logs
          path: docker-compose.log

      - name: Stop services
        if: always()
        run: |
          docker-compose down -v

  # ============================================
  # Build Validation
  # ============================================
  validate-docker-build:
    name: Validate Docker Build
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false || github.event_name != 'pull_request'
    strategy:
      matrix:
        service: [api, worker, web]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/${{ matrix.service }}
          file: ./apps/${{ matrix.service }}/Dockerfile
          push: false
          tags: resumesync-${{ matrix.service }}:ci-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ github.sha }}
            BUILD_TIME=${{ github.event.head_commit.timestamp }}

  # ============================================
  # CI Summary
  # ============================================
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    if: always()
    needs: 
      - lint-go
      - lint-js
      - test-go-api
      - test-go-worker
      - test-nextjs
      - integration-tests
      - validate-docker-build
    steps:
      - name: Check CI Status
        run: |
          echo "=
 CI Pipeline Summary"
          echo "====================="
          echo "Lint Go: ${{ needs.lint-go.result }}"
          echo "Lint JS: ${{ needs.lint-js.result }}"
          echo "Test API: ${{ needs.test-go-api.result }}"
          echo "Test Worker: ${{ needs.test-go-worker.result }}"
          echo "Test Next.js: ${{ needs.test-nextjs.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "Docker Build: ${{ needs.validate-docker-build.result }}"
          
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "CI Pipeline failed"
            exit 1
          else
            echo " CI Pipeline passed"
          fi

      - name: Post CI Comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const summary = `## > CI Pipeline Results
            
            | Job | Status |
            |-----|--------|
            | Lint Go | ${{ needs.lint-go.result }} |
            | Lint JS | ${{ needs.lint-js.result }} |
            | Test API | ${{ needs.test-go-api.result }} |
            | Test Worker | ${{ needs.test-go-worker.result }} |
            | Test Next.js | ${{ needs.test-nextjs.result }} |
            | Integration Tests | ${{ needs.integration-tests.result }} |
            | Docker Build | ${{ needs.validate-docker-build.result }} |
            
            **Overall Status:** ${{ contains(needs.*.result, 'failure') && 'L Failed' || ' Passed' }}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });